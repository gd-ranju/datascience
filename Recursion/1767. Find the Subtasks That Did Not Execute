Database Schema
1. Tasks Table
This table contains details about tasks and their respective subtasks.

Column Name	Data Type	Description
task_id	int	Primary key, unique identifier for each task.
subtasks_count	int	Total number of subtasks assigned to this task (ranging from 2 to 20).
Each row in the Tasks table represents a unique task, which is divided into subtasks_count subtasks, labeled sequentially from 1 to subtasks_count.

2. Executed Table
This table tracks which subtasks were successfully executed.

Column Name	Data Type	Description
task_id	int	Foreign key referencing task_id from the Tasks table.
subtask_id	int	The specific subtask that has been executed.
Each row in the Executed table represents a successfully executed subtask under a particular task. The combination (task_id, subtask_id) is the primary key, ensuring uniqueness.
It is guaranteed that subtask_id â‰¤ subtasks_count for each task.

Objective
Write an SQL query to find all missing subtasks for each task, i.e., subtasks that were not executed.

Example Input & Output
Input Data
Tasks Table
task_id	subtasks_count
1	3
2	2
3	4
Executed Table
task_id	subtask_id
1	2
3	1
3	2
3	3
3	4
Expected Output
task_id	subtask_id
1	1
1	3
2	1
2	2
Explanation
Task 1 has 3 subtasks (1, 2, 3). Only subtask 2 was executed. The missing subtasks are (1, 1) and (1, 3).
Task 2 has 2 subtasks (1, 2). None were executed, so both (2, 1) and (2, 2) are missing.
Task 3 has 4 subtasks (1, 2, 3, 4). All were executed, so there are no missing subtasks.
Solution Approach
Generate a list of all possible subtasks for each task_id (using recursion).
Identify missing subtasks by comparing the generated list with the Executed table.
Return the missing subtasks.






WITH RECURSIVE subtask_numbers(n) AS (
    SELECT 1
    UNION ALL
    SELECT n + 1 FROM subtask_numbers WHERE n < (SELECT MAX(subtasks_count) FROM Tasks)
),
task_subtasks AS (  -- Generates all possible (task_id, subtask_id) pairs
    SELECT t.task_id, subtask_numbers.n AS subtask_id
    FROM Tasks t
    JOIN subtask_numbers ON subtask_numbers.n <= t.subtasks_count
)
-- Select missing subtasks by finding those not present in Executed
SELECT ts.task_id, ts.subtask_id
FROM task_subtasks ts
LEFT JOIN Executed e ON ts.task_id = e.task_id AND ts.subtask_id = e.subtask_id
WHERE e.subtask_id IS NULL;
