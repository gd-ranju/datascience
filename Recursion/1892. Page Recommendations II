You are implementing a page recommendation system for a social media website. Your system will recommend a page to user_id if the page is liked by at least one friend of user_id and is not liked by user_id.

Write a solution to find all the possible page recommendations for every user. Each recommendation should appear as a row in the result table with these columns:

user_id: The ID of the user that your system is making the recommendation to.
page_id: The ID of the page that will be recommended to user_id.
friends_likes: The number of the friends of user_id that like page_id.



WITH cte_all_users AS (
    -- Create a symmetric friendship relation, ensuring bidirectional friendship
    SELECT user1_id AS user_id, user2_id AS friend FROM Friendship
    UNION
    SELECT user2_id AS user_id, user1_id AS friend FROM Friendship
)

SELECT DISTINCT
    a.user_id,              -- The user for whom the recommendation is generated
    b.page_id,              -- The page liked by the friend
    COUNT(a.friend) AS friends_likes  -- Number of friends who like the page
FROM cte_all_users a
JOIN Likes b ON b.user_id = a.friend  -- Find pages liked by friends
LEFT JOIN Likes c 
    ON c.user_id = a.user_id AND b.page_id = c.page_id  -- Check if the user already liked the page
WHERE c.page_id IS NULL  -- Exclude pages the user already liked
GROUP BY a.user_id, b.page_id;
Key Improvements & Explanation:
Bidirectional Friendship Handling:

The cte_all_users ensures that friendships are considered in both directions.
Finding Friend-Liked Pages:

We join the Likes table with the cte_all_users to find pages liked by a userâ€™s friend.
Excluding Already Liked Pages:

A left join with Likes (aliased as c) ensures we exclude pages that the user has already liked.
Counting Friends Who Like the Page:

We count the occurrences of friends who have liked each page to determine popularity among friends.
