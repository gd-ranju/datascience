WITH RECURSIVE Words AS (
    -- Step 1: Extract the first word from content_text and assign a token index.
    SELECT
      content_id,
      SUBSTRING_INDEX(content_text, ' ', 1) AS word, -- Extract the first word
      SUBSTRING(
        content_text,
        LENGTH(SUBSTRING_INDEX(content_text, ' ', 1)) + 2 -- Remove extracted word from text
      ) AS remaining_text,
      1 AS token_index -- Initialize token index
    FROM user_content

    UNION ALL

    -- Step 2: Recursively extract the next word and increment the token index.
    SELECT
      content_id,
      SUBSTRING_INDEX(remaining_text, ' ', 1) AS word, -- Extract next word
      SUBSTRING(
        remaining_text,
        LENGTH(SUBSTRING_INDEX(remaining_text, ' ', 1)) + 2 -- Remove extracted word
      ) AS remaining_text,
      token_index + 1 AS token_index -- Increment token index
    FROM Words
    WHERE remaining_text != '' -- Stop recursion when all words are extracted
),
Converted AS (
    -- Step 3: Reconstruct the words in original order with proper capitalization.
    SELECT
      content_id,
      GROUP_CONCAT(
        CONCAT(
          UPPER(SUBSTRING(word, 1, 1)), -- Capitalize the first letter
          LOWER(SUBSTRING(word, 2)) -- Convert the rest to lowercase
        )
        ORDER BY token_index SEPARATOR ' ' -- Maintain original word order
      ) AS converted_text
    FROM Words
    GROUP BY content_id
)

-- Step 4: Select and return the results with original and formatted text.
SELECT
  UserContent.content_id,
  UserContent.content_text AS original_text, -- Original unformatted text
  Converted.converted_text -- Formatted text with proper capitalization
FROM user_content AS UserContent
INNER JOIN Converted USING (content_id);



Explanation with Example
The query is designed to:

Extract words from a text recursively (one by one).
Reassemble the words with proper capitalization (first letter uppercase, rest lowercase).
Example Input Table (user_content)
content_id	content_text
1	hello world! this is sql
2	recursive queries are powerful
Step 1: Initial Extraction (Words CTE - Base Case)
The first word is extracted, and the remaining text is stored.
content_id	word	remaining_text	token_index
1	hello	world! this is sql	1
2	recursive	queries are powerful	1
Step 2: Recursion (Extract Next Word)
Each iteration extracts the next word, removes it from remaining_text, and increments token_index.
content_id	word	remaining_text	token_index
1	hello	world! this is sql	1
1	world!	this is sql	2
1	this	is sql	3
1	is	sql	4
1	sql	(empty)	5
2	recursive	queries are powerful	1
2	queries	are powerful	2
2	are	powerful	3
2	powerful	(empty)	4
Step 3: Capitalization (Converted CTE)
Each word is capitalized properly (Hello World! This Is Sql).
The words are reassembled using GROUP_CONCAT.
content_id	converted_text
1	Hello World! This Is Sql
2	Recursive Queries Are Powerful
Step 4: Final Selection
The final query joins the original text with the transformed text.

content_id	original_text	converted_text
1	hello world! this is sql	Hello World! This Is Sql
2	recursive queries are powerful	Recursive Queries Are Powerful
Summary
Recursive CTE extracts words step by step.
Capitalization is applied after extracting words.
Final output presents original vs formatted text.

