Table: Product

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| product_name  | varchar |
+---------------+---------+
product_id is the primary key (column with unique values) for this table.
product_name is the name of the product.
 

Table: Sales

+---------------------+---------+
| Column Name         | Type    |
+---------------------+---------+
| product_id          | int     |
| period_start        | date    |
| period_end          | date    |
| average_daily_sales | int     |
+---------------------+---------+
product_id is the primary key (column with unique values) for this table. 
period_start and period_end indicate the start and end date for the sales period, and both dates are inclusive.
The average_daily_sales column holds the average daily sales amount of the items for the period.
The dates of the sales years are between 2018 to 2020.
 

Write a solution to report the total sales amount of each item for each year, with corresponding product_name, product_id, report_year, and total_amount.

Return the result table ordered by product_id and report_year.


WITH
  Calendar AS (
    # We should be given a calendar in hand. Otherwise, assume we are oracle
    # and already know the testcase.
    SELECT '2018' AS year, '2018-01-01' AS start, '2018-12-31' AS end
    UNION ALL
    SELECT '2019' AS year, '2019-01-01' AS start, '2019-12-31' AS end
    UNION ALL
    SELECT '2020' AS year, '2020-01-01' AS start, '2020-12-31' AS end
  )
SELECT
  Product.product_id,
  Product.product_name,
  Calendar.year AS report_year,
  (
    DATEDIFF(
      LEAST(Sales.period_end, Calendar.end),
      GREATEST(Sales.period_start, Calendar.start)
    ) + 1
  ) * Sales.average_daily_sales AS total_amount
FROM Sales
INNER JOIN Calendar
  ON (Calendar.year BETWEEN YEAR(Sales.period_start) AND year(Sales.period_end))
INNER JOIN Product
  USING (product_id)
ORDER BY 1, 3;
