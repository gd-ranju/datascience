You are implementing a page recommendation system for a social media website. Your system will recommend a page to user_id if the page is liked by at least one friend of user_id and is not liked by user_id.

Write a solution to find all the possible page recommendations for every user. Each recommendation should appear as a row in the result table with these columns:

user_id: The ID of the user that your system is making the recommendation to.
page_id: The ID of the page that will be recommended to user_id.
friends_likes: The number of the friends of user_id that like page_id.
Input: 
Friendship table:
+----------+----------+
| user1_id | user2_id |
+----------+----------+
| 1        | 2        |
| 1        | 3        |
| 1        | 4        |
| 2        | 3        |
| 2        | 4        |
| 2        | 5        |
| 6        | 1        |
+----------+----------+
Likes table:
+---------+---------+
| user_id | page_id |
+---------+---------+
| 1       | 88      |
| 2       | 23      |
| 3       | 24      |
| 4       | 56      |
| 5       | 11      |
| 6       | 33      |
| 2       | 77      |
| 3       | 77      |
| 6       | 88      |
+---------+---------+
Output: 
+---------+---------+---------------+
| user_id | page_id | friends_likes |
+---------+---------+---------------+
| 1       | 77      | 2             |
| 1       | 23      | 1             |
| 1       | 24      | 1             |
| 1       | 56      | 1             |
| 1       | 33      | 1             |
| 2       | 24      | 1             |
| 2       | 56      | 1             |
| 2       | 11      | 1             |
| 2       | 88      | 1             |
| 3       | 88      | 1             |
| 3       | 23      | 1             |
| 4       | 88      | 1             |
| 4       | 77      | 1             |
| 4       | 23      | 1             |
| 5       | 77      | 1             |
| 5       | 23      | 1             |
+---------+---------+---------------+
Explanation: 
Take user 1 as an example:
  - User 1 is friends with users 2, 3, 4, and 6.
  - Recommended pages are 23 (user 2 liked it), 24 (user 3 liked it), 56 (user 3 liked it), 33 (user 6 liked it), and 77 (user 2 and user 3 liked it).
  - Note that page 88 is not recommended because user 1 already liked it.

Another example is user 6:
  - User 6 is friends with user 1.
  - User 1 only liked page 88, but user 6 already liked it. Hence, user 6 has no recommendations.

You can recommend pages for users 2, 3, 4, and 5 using a similar process.


WITH cte_all_users AS (
    -- Create a symmetric friendship relation, ensuring bidirectional friendship
    SELECT user1_id AS user_id, user2_id AS friend FROM Friendship
    UNION
    SELECT user2_id AS user_id, user1_id AS friend FROM Friendship
)

SELECT DISTINCT
    a.user_id,                                                      -- The user for whom the recommendation is generated
    b.page_id,                                                      -- The page liked by the friend
    COUNT(a.friend) AS friends_likes                                -- Number of friends who like the page
FROM cte_all_users a
JOIN Likes b ON b.user_id = a.friend                                -- Find pages liked by friends
LEFT JOIN Likes c 
    ON c.user_id = a.user_id AND b.page_id = c.page_id              -- Check if the user already liked the page
WHERE c.page_id IS NULL                                             -- Exclude pages the user already liked
GROUP BY a.user_id, b.page_id;




Key Improvements & Explanation:
Bidirectional Friendship Handling:

The cte_all_users ensures that friendships are considered in both directions.
Finding Friend-Liked Pages:
We join the Likes table with the cte_all_users to find pages liked by a userâ€™s friend.
Excluding Already Liked Pages:
A left join with Likes (aliased as c) ensures we exclude pages that the user has already liked.
Counting Friends Who Like the Page:
We count the occurrences of friends who have liked each page to determine popularity among friends.
